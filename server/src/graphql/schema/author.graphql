# Author data
type Author {
  id: ID!
  name: String!
  surname: String
  transcriptionName: String
  portrait: String
  portraitThumbnail: String
  books: [Book!]!
  series: [Series!]!
  booksWithoutSeries: [Book!]!
}

# Author data + total count
type AuthorResponse {
  totalCount: Int!
  authors: [Author!]!
}

# Author data without pagination
type AuthorMostReadResponse {
  id: ID!
  count: Int!
  name: String!
  surname: String
  portraitThumbnail: String
}

# input data for add author
input AuthorInput {
  name: String!
  surname: String
  portrait: String
  portraitThumbnail: String
  transcriptionName: String
}

extend type Query {
  # Get a list of authors
  getAllAuthors(limit: Int = 50, page: Int = 1): AuthorResponse!

  # Get a list of authors sorted by count reded books
  getAllAuthorsByBooksCount: [AuthorMostReadResponse!]!

  # Get one author by id
  getOneAuthor(id: ID): Author
}

extend type Mutation {
  # Add author
  createAuthor(input: AuthorInput!): Author!
}
